rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.designation == 'Admin';
    }
    
    function isFaculty() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.designation == 'Faculty';
    }
    
    function isSecretary() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.designation == 'Secretary';
    }
    
    function isStudent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.designation == 'Student';
    }
    
    function isFacultyOrSecretary() {
      return isFaculty() || isSecretary();
    }
    
    function isAdminOrFaculty() {
      return isAdmin() || isFaculty();
    }
    
    function isAdminOrSecretary() {
      return isAdmin() || isSecretary();
    }
    
    function isValidDate(date) {
      return date is timestamp && date > timestamp.date(2024, 1, 1);
    }
    
    function isValidBookingTime(startTime, endTime) {
      return isValidDate(startTime) && 
             isValidDate(endTime) && 
             startTime < endTime;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAdmin();
    }

    // Rooms collection rules
    match /rooms/{roomId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
      
      // Validate room data
      allow create: if isAdmin() && 
        request.resource.data.type is string &&
        request.resource.data.capacity is number &&
        request.resource.data.location is string &&
        request.resource.data.buildingName is string &&
        request.resource.data.latitude is number &&
        request.resource.data.longitude is number;
    }

    // Bookings collection rules
    match /bookings/{bookingId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
      
      // Validate booking data
      allow create: if isAdmin() && 
        request.resource.data.roomId is string &&
        request.resource.data.requesterId is string &&
        request.resource.data.requesterName is string &&
        request.resource.data.requesterDesignation is string &&
        isValidBookingTime(request.resource.data.startTime, request.resource.data.endTime);
    }

    // BookingRequests collection rules
    match /bookingRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isFacultyOrSecretary();
      allow update: if isAdmin();
      allow delete: if isAdmin() || 
        (isAuthenticated() && resource.data.requesterId == request.auth.uid);
      
      // Validate booking request data
      allow create: if isFacultyOrSecretary() && 
        request.resource.data.roomId is string &&
        request.resource.data.requesterId is string &&
        request.resource.data.requesterName is string &&
        request.resource.data.requesterDesignation is string &&
        isValidBookingTime(request.resource.data.startTime, request.resource.data.endTime) &&
        request.resource.data.status == 'PENDING';
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrFaculty();
      allow update: if isAdminOrFaculty();
      allow delete: if isAdmin();
      
      // Validate event data
      allow create: if isAdminOrFaculty() && 
        request.resource.data.title is string &&
        request.resource.data.description is string &&
        request.resource.data.organizerId is string &&
        isValidDate(request.resource.data.date);
    }

    // TimeTables collection rules
    match /timeTables/{timeTableId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrSecretary();
      allow update: if isAdminOrSecretary();
      allow delete: if isAdmin();
      
      // Validate timetable data
      allow create: if isAdminOrSecretary() && 
        request.resource.data.semester is string &&
        request.resource.data.department is string &&
        request.resource.data.fileUrl is string;
    }

    // Maps collection rules
    match /maps/{mapId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
      
      // Validate map data
      allow create: if isAdmin() && 
        request.resource.data.name is string &&
        request.resource.data.fileUrl is string;
    }

    // Glimpses collection rules
    match /glimpses/{glimpseId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrFaculty();
      allow update: if isAdminOrFaculty();
      allow delete: if isAdmin();
      
      // Validate glimpse data
      allow create: if isAdminOrFaculty() && 
        request.resource.data.title is string &&
        request.resource.data.description is string &&
        request.resource.data.mediaUrl is string;
    }

    // Community collection rules
    match /community/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAdmin() || 
        (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      // Validate community post data
      allow create: if isAuthenticated() && 
        request.resource.data.userId is string &&
        request.resource.data.content is string;
    }
  }
} 